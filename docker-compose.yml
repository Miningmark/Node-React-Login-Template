version: "3.9"

services:
  frontend:
    build: ./frontend
    container_name: frontend
    restart: always
    depends_on:
      - backend
    env_file:
      - "./frontend/.env"
    expose:
      - "80"
    networks:
      - app-network

  backend:
    build: ./backend
    container_name: backend
    restart: always
    depends_on:
      - default-database
    env_file:
      - ./backend/.env
    expose:
      - "4000"
    networks:
      - app-network

  default-database:
    image: mysql:8
    container_name: default-database
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - default-database-data:/var/lib/mysql
    networks:
      - app-network

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: default-phpmyadmin
    restart: always
    environment:
      - PMA_HOST=default-database
      - PMA_ABSOLUTE_URI=https://node.miningmark.de/phpmyadmin/
    depends_on:
      - default-database
    expose:
      - "80"
    networks:
      - app-network

  #default-s3:
  #  image: minio/minio
  # container_name: default-s3
  #  command: server /data --console-address ":9001"
  #  environment:
  #   - MINIO_ROOT_USER=minio
  #    - MINIO_ROOT_PASSWORD=minio123
  #  ports:
  #    - "9000:9000"
  #    - "9001:9001"
  #  volumes:
  #    - default-s3-data:/data
  #  networks:
  #    - app-network

  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    restart: always
    environment:
      - DOMAIN=node.miningmark.de
    depends_on:
      - frontend
      - backend
      - default-database
      #- default-s3
    ports:
      - "80:80"
      - "443:443"
    #command: /bin/sh -c "envsubst '\$DOMAIN' < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./certbot/www:/var/www/certbot
      - /etc/letsencrypt:/etc/letsencrypt
    networks:
      - app-network

  certbot:
    image: certbot/certbot
    container_name: certbot
    restart: always
    depends_on:
      - nginx
    volumes:
      - ./certbot/www:/var/www/certbot
      - /etc/letsencrypt:/etc/letsencrypt
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do sleep 12h & wait $${!}; certbot renew; done'"
    networks:
      - app-network

volumes:
  default-database-data:
  #default-s3-data:

networks:
  app-network:
    driver: bridge